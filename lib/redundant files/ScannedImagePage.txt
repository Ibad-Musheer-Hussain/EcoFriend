import 'dart:io';
import 'package:ecofriend/functions/fetchProductData.dart';
import 'package:lottie/lottie.dart';
import 'package:flutter/material.dart';

class ScannedImagePage extends StatefulWidget {
  final File imageFile;
  final String barcodeValue;

  ScannedImagePage({
    required this.imageFile,
    required this.barcodeValue,
  });

  @override
  State<ScannedImagePage> createState() => _ScannedImagePageState();
}

class _ScannedImagePageState extends State<ScannedImagePage> {
  ScrollController scrollController = ScrollController();

  final List<String> targetIngredients = [
    "SUGAR",
    "SALT",
    "CORN SYRUP",
    "HIGH-FRUCTOSE CORN SYRUP",
    "HCFS",
    "PALM",
    "VEGETABLE OIL",
    "ASPARTAME",
    "MSG",
    "PHOSPHATE",
    "NITRATE",
    "NITRITE",
    "BUTANE",
    "PROPANE",
    "METHANE",
    "ARSENIC",
    "PALM OIL"
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        scrolledUnderElevation: 0,
        centerTitle: true,
        title: Text('Scan'),
      ),
      body: ListView(
        children: <Widget>[
          Center(
            child: Container(
                height: 300,
                width: 300,
                child: Stack(children: [
                  Container(
                    child: Image.file(
                      widget.imageFile,
                      fit: BoxFit.cover,
                      height: 300,
                      width: 300,
                    ),
                  ),
                  Lottie.asset('lib/images/scan3.json',
                      reverse: true,
                      height: 450,
                      width: 450,
                      fit: BoxFit.fitHeight),
                ])),
          ),
          SizedBox(height: 10),
          FutureBuilder<Map<String, dynamic>>(
            future: fetchProductData(widget.barcodeValue),
            builder: (context, snapshot) {
              if (snapshot.connectionState == ConnectionState.waiting) {
                return Center(child: CircularProgressIndicator());
              } else if (snapshot.hasError) {
                return Center(child: Text('Error: ${snapshot.error}'));
              } else if (!snapshot.hasData || snapshot.data == null) {
                return Center(child: Text('No data available'));
              }

              final product = snapshot.data!['product'];

              String categoriesText;
              if (product['category_properties'] is Map) {
                categoriesText = product['category_properties']
                        ['ciqual_food_name:en'] ??
                    'No category';
              } else {
                categoriesText = 'No category';
              }

              List<Widget> ingredientWidgets = [];

              if (product['ingredients'] is List) {
                final ingredients = product['ingredients'] as List;

                for (var ingredient in ingredients) {
                  if (ingredient['percent_estimate'] != null) {
                    String ingredientId =
                        ingredient['id'].toString().replaceAll('en:', '');

                    double percentEstimate =
                        (ingredient['percent_estimate'] as num).toDouble();
                    String formattedPercent =
                        percentEstimate.toStringAsFixed(2);
                    ingredientWidgets.add(
                      Text(
                        '$ingredientId: $formattedPercent%',
                        style: TextStyle(fontSize: 16),
                      ),
                    );
                  }
                }
              }
              final ingredientsText =
                  product['ingredients_text_en']?.replaceAll('_', '') ??
                      'No ingredients'; //MOST AUTISTIC CODE EVER WRITTEN
              return Padding(
                padding: const EdgeInsets.all(16.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    if (product['image_url'] != null)
                      Center(
                          child: Image.network(
                        product['image_url'],
                        height: 300,
                        width: 300,
                      )),
                    SizedBox(height: 16),
                    Text(
                      product['product_name'] != ''
                          ? '${product['product_name']} ${product['quantity'] ?? ''}'
                          : 'No name',
                      style:
                          TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
                    ),
                    SizedBox(height: 8),
                    Text('Brand: ${product['brands'] ?? 'No brand'}'),
                    SizedBox(height: 8),
                    Text('Category: $categoriesText'),
                    SizedBox(height: 8),
                    Text.rich(
                      TextSpan(
                        children: ingredientsText
                            .split(', ')
                            .map<InlineSpan>((ingredient) {
                          ingredient = ingredient.trim().toUpperCase();

                          bool isCommon = targetIngredients
                              .any((target) => ingredient.contains(target));
                          bool isLast = ingredientsText
                                  .split(', ')
                                  .last
                                  .trim()
                                  .toUpperCase() ==
                              ingredient;
                          String separator = isLast ? '.' : ', ';

                          return TextSpan(
                            children: [
                              TextSpan(
                                text: ingredient.toLowerCase(),
                                style: TextStyle(
                                  fontSize: 20,
                                  color:
                                      isCommon ? Colors.yellow : Colors.black,
                                ),
                              ),
                              TextSpan(
                                text: separator,
                                style: TextStyle(
                                  fontSize: 20,
                                  color: Colors.black,
                                ),
                              ),
                            ],
                          );
                        }).toList(),
                      ),
                    ),
                    SizedBox(height: 8),
                    Text('Nutritional Information:'),
                    if (product['nutriments'] != null) ...[
                      Text(
                          'Energy: ${product['nutriments']['energy-kcal_100g']} kcal per 100g'),
                      Text(
                          'Fat: ${product['nutriments']['fat_100g']} g per 100g'),
                      Text(
                          'Carbohydrates: ${product['nutriments']['carbohydrates_100g']} g per 100g'),
                      Text(
                          'Proteins: ${product['nutriments']['proteins_100g']} g per 100g'),
                    ],
                    SizedBox(height: 8),
                    Text(
                      'Packaging: ${getPackagingTextList(product).join(", ")}',
                      style: TextStyle(fontSize: 16),
                    ),
                    Text(
                      "Ecoscore: ${product['ecoscore_data']?['grade'] ?? 'Not Available'}",
                      style: TextStyle(fontSize: 16),
                    ),
                    SizedBox(height: 16),
                    Text('Estimated Ingredient Percentages:'),
                    ...ingredientWidgets,
                  ],
                ),
              );
            },
          ),
        ],
      ),
    );
  }
}
