import 'package:ecofriend/functions/fetchProductData.dart';
import 'package:flutter/material.dart';

class ProductDetailPage extends StatelessWidget {
  final String barcode;

  ProductDetailPage({required this.barcode});



  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Product Details'),
      ),
      body: FutureBuilder<Map<String, dynamic>>(
        future: fetchProductData(barcode),
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return Center(child: CircularProgressIndicator());
          } else if (snapshot.hasError) {
            return Center(child: Text('Error: ${snapshot.error}'));
          } else if (!snapshot.hasData || snapshot.data == null) {
            return Center(child: Text('No data available'));
          }

          final product = snapshot.data!['product'];

          String categoriesText;
          if (product['category_properties'] is Map) {
            categoriesText = product['category_properties']
                    ['ciqual_food_name:en'] ??
                'No category';
          } else {
            categoriesText = 'No category';
          }

          List<Widget> ingredientWidgets = [];

          if (product['ingredients'] is List) {
            final ingredients = product['ingredients'] as List;

            for (var ingredient in ingredients) {
              if (ingredient['percent_estimate'] != null) {
                String ingredientId =
                    ingredient['id'].toString().replaceAll('en:', '');

                double percentEstimate =
                    (ingredient['percent_estimate'] as num).toDouble();
                String formattedPercent = percentEstimate.toStringAsFixed(2);
                ingredientWidgets.add(
                  Text(
                    '$ingredientId: $formattedPercent%',
                    style: TextStyle(fontSize: 16),
                  ),
                );
              }
            }
          }

          return Padding(
            padding: const EdgeInsets.all(16.0),
            child: ListView(
              children: [
                if (product['image_url'] != null)
                  Image.network(product['image_url']),
                SizedBox(height: 16),
                Text(
                  product['product_name'] != ''
                      ? '${product['product_name']} ${product['quantity'] ?? ''}'
                      : 'No name',
                  style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
                ),
                SizedBox(height: 8),
                Text('Brand: ${product['brands'] ?? 'No brand'}'),
                SizedBox(height: 8),
                Text('Category: $categoriesText'),
                SizedBox(height: 8),
                Text(
                    'Ingredients: ${product['ingredients_text_en'] ?? 'No ingredients'}'),
                SizedBox(height: 8),
                Text('Nutritional Information:'),
                if (product['nutriments'] != null) ...[
                  Text(
                      'Energy: ${product['nutriments']['energy-kcal_100g']} kcal per 100g'),
                  Text('Fat: ${product['nutriments']['fat_100g']} g per 100g'),
                  Text(
                      'Carbohydrates: ${product['nutriments']['carbohydrates_100g']} g per 100g'),
                  Text(
                      'Proteins: ${product['nutriments']['proteins_100g']} g per 100g'),
                ],
                SizedBox(height: 8),
                Text(
                  'Packaging: ${getPackagingTextList(product).join(", ")}',
                  style: TextStyle(fontSize: 16),
                ),
                Text(
                  "Ecoscore: ${product['ecoscore_data']?['grade'] ?? 'Not Available'}",
                  style: TextStyle(fontSize: 16),
                ),
                SizedBox(height: 16),
                Text('Estimated Ingredient Percentages:'),
                ...ingredientWidgets,
              ],
            ),
          );
        },
      ),
    );
  }
}
